name: "cifar10-convnet"
train_steps: 1000
test_steps:100
test_frequency:300
display_frequency:30
updater{
  momentum:0.9
  weight_decay:0.004
  learning_rate_change_method:kFixedStep
  step:0
  step:60000
  step:65000
  step_lr:0.001
  step_lr:0.0001
  step_lr:0.00001
}
neuralnet {
partition_type: kDataPartition
layer{
  name: "data"
  type: "kShardData"
  data_param {
    path: "examples/cifar10/cifar10_train_shard"
    batchsize: 128
  }
  exclude: kTest
}
layer{
  name: "data"
  type: "kShardData"
  data_param {
    path: "examples/cifar10/cifar10_test_shard"
    batchsize: 128
  }
  exclude: kTrain
}
layer{
  name:"rgb"
  type: "kRGBImage"
  srclayers: "data"
  rgbimage_param {
    meanfile: "examples/cifar10/image_mean.bin"
  }
}
layer{
  name: "label"
  type: "kLabel"
  srclayers: "data"
}

layer {
  name: "conv1"
  type: "kConvolution"
  srclayers: "rgb"
  convolution_param {
    num_filters: 32
    kernel: 5
    stride: 1
    pad:2
  }
  param{
      name: "weight"
      init_method:kGaussian
      std:0.0001
      learning_rate_multiplier:1.0
    }
  param{
      name: "bias"
      init_method: kConstant
      learning_rate_multiplier:2.0
      value:0
    }
}

layer {
  name: "pool1"
  type: "kPooling"
  srclayers: "conv1"
  pooling_param {
    pool: MAX
    kernel: 3
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "kReLU"
  srclayers:"pool1"
}
layer {
  name: "norm1"
  type: "kLRN"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    local_size: 3
    alpha: 5e-05
    beta: 0.75
  }
  srclayers:"relu1"
}
layer {
  name: "conv2"
  type: "kConvolution"
  srclayers: "norm1"
  convolution_param {
    num_filters: 32
    kernel: 5
    stride: 1
    pad:2
  }
  param{
      name: "weight"
      init_method:kGaussian
      std:0.01
      learning_rate_multiplier:1.0
    }
  param{
      name: "bias"
      init_method: kConstant
      learning_rate_multiplier:2.0
      value:0
    }
}
layer {
  name: "relu2"
  type: "kReLU"
  srclayers:"conv2"
}
layer {
  name: "pool2"
  type: "kPooling"
  srclayers: "relu2"
  pooling_param {
    pool: MAX
    kernel: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "kLRN"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    local_size: 3
    alpha: 5e-05
    beta: 0.75
  }
  srclayers:"pool2"
}
layer {
  name: "conv3"
  type: "kConvolution"
  srclayers: "norm2"
  convolution_param {
    num_filters: 64
    kernel: 5
    stride: 1
    pad:2
  }
  param{
      name: "weight"
      init_method:kGaussian
      std:0.01
    }
  param{
      name: "bias"
      init_method: kConstant
      value:0
    }
}
layer {
  name: "relu3"
  type: "kReLU"
  srclayers:"conv3"
}
layer {
  name: "pool3"
  type: "kPooling"
  srclayers: "relu3"
  pooling_param {
    pool: AVE
    kernel: 3
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "kInnerProduct"
  srclayers:"pool3"
  inner_product_param {
    num_output: 10
  }
  param{
      name: "weight"
      init_method:kGaussian
      std:0.01
      learning_rate_multiplier:1.0
      weight_decay_multiplier:250
    }
  param{
      name: "bias"
      init_method: kConstant
      learning_rate_multiplier:2.0
      weight_decay_multiplier:0
      value:0
  }
}

layer{
  name: "loss"
  type:"kSoftmaxLoss"
  softmaxloss_param{
    topk:1
  }
  srclayers:"ip1"
  srclayers: "label"
}
}
